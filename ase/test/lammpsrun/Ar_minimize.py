from ase.calculators.lammpsrun import LAMMPS
from ase.cluster.icosahedron import Icosahedron
from ase.data import atomic_numbers,  atomic_masses
import numpy as np
from numpy.testing import assert_allclose
from ase.optimize import LBFGS


ar_nc = Icosahedron('Ar', noshells=2)
ar_nc.cell = [[300, 0, 0], [0, 300, 0], [0, 0, 300]]
ar_nc.pbc = True

params = {}
params['pair_style'] = 'lj/cut 8.0'
params['pair_coeff'] = ['1 1 0.0108102 3.345']
params['masses'] = ['1 {}'.format(atomic_masses[atomic_numbers['Ar']])]

calc = LAMMPS(specorder=['Ar'], **params)

ar_nc.set_calculator(calc)

F1_ref = np.array([
    [+2.49366500e-17, +2.55871713e-17, +2.45029691e-17],
    [-1.41065856e-02, +4.33680869e-19, +8.71834934e-03],
    [-1.41065856e-02, +4.82469967e-18, -8.71834934e-03],
    [+1.41065856e-02, +7.04731412e-19, +8.71834934e-03],
    [+1.41065856e-02, +4.17417836e-18, -8.71834934e-03],
    [+8.71834934e-03, -1.41065856e-02, +5.69206141e-18],
    [-8.71834934e-03, -1.41065856e-02, +1.73472348e-18],
    [+8.71834934e-03, +1.41065856e-02, +5.74627151e-18],
    [-8.71834934e-03, +1.41065856e-02, +0.00000000e+00],
    [+8.67361738e-19, +8.71834934e-03, -1.41065856e-02],
    [+4.39101880e-18, -8.71834934e-03, -1.41065856e-02],
    [+4.87890978e-19, +8.71834934e-03, +1.41065856e-02],
    [+4.77048956e-18, -8.71834934e-03, +1.41065856e-02]])

pos1_ref = np.array([
    [3.16389502, 3.16389502, 3.16389502],
    [6.32779005, 3.16389502, 1.20850036],
    [6.32779005, 3.16389502, 5.11928968],
    [0.00000000, 3.16389502, 1.20850036],
    [0.00000000, 3.16389502, 5.11928968],
    [1.20850036, 6.32779005, 3.16389502],
    [5.11928968, 6.32779005, 3.16389502],
    [1.20850036, 0.00000000, 3.16389502],
    [5.11928968, 0.00000000, 3.16389502],
    [3.16389502, 1.20850036, 6.32779005],
    [3.16389502, 5.11928968, 6.32779005],
    [3.16389502, 1.20850036, 0.00000000],
    [3.16389502, 5.11928968, 0.00000000]])


assert_allclose(ar_nc.get_potential_energy(), -0.468147667942117)
assert_allclose(ar_nc.get_forces(), F1_ref, atol=1e-14)
assert_allclose(ar_nc.positions, pos1_ref, atol=1e-14)

dyn = LBFGS(ar_nc, force_consistent=False)
dyn.run(fmax=1E-6)

F2_ref = np.array([
    [-1.41987117e-14, -1.41987117e-14, -1.41987117e-14],
    [-5.15991467e-07, -2.38914791e-15, +3.18900267e-07],
    [-5.15991465e-07, -2.38806371e-15, -3.18900267e-07],
    [+5.15991479e-07, -2.37695063e-15, +3.18900270e-07],
    [+5.15991477e-07, -2.36578335e-15, -3.18900271e-07],
    [+3.18900267e-07, -5.15991467e-07, -2.38914791e-15],
    [-3.18900267e-07, -5.15991465e-07, -2.38828055e-15],
    [+3.18900270e-07, +5.15991479e-07, -2.39088263e-15],
    [-3.18900271e-07, +5.15991478e-07, -2.38524478e-15],
    [-2.37093331e-15, +3.18900267e-07, -5.15991467e-07],
    [-2.38199217e-15, -3.18900267e-07, -5.15991465e-07],
    [-2.36865649e-15, +3.18900270e-07, +5.15991479e-07],
    [-2.36540388e-15, -3.18900271e-07, +5.15991477e-07]])

pos2_ref = np.array([
    [3.16389502, 3.16389502, 3.16389502],
    [6.24218920, 3.16389502, 1.26140460],
    [6.24218920, 3.16389502, 5.06638545],
    [0.08560085, 3.16389502, 1.26140460],
    [0.08560085, 3.16389502, 5.06638545],
    [1.26140460, 6.24218920, 3.16389502],
    [5.06638545, 6.24218920, 3.16389502],
    [1.26140460, 0.08560085, 3.16389502],
    [5.06638545, 0.08560085, 3.16389502],
    [3.16389502, 1.26140460, 6.24218920],
    [3.16389502, 5.06638545, 6.24218920],
    [3.16389502, 1.26140460, 0.08560085],
    [3.16389502, 5.06638545, 0.08560085]])

assert_allclose(ar_nc.get_potential_energy(), -0.4791815886953914)
assert_allclose(ar_nc.get_forces(), F2_ref, atol=1e-14)
assert_allclose(ar_nc.positions, pos2_ref, atol=1e-14)
