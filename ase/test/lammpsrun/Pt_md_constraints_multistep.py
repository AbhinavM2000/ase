from ase.calculators.lammpsrun import LAMMPS
import numpy as np
from numpy.testing import assert_allclose
from ase.test.eam_pot import Pt_u3
from ase.build import fcc111
import os


pot_fn = 'Pt_u3.eam'
f = open(pot_fn, 'w')
f.write(Pt_u3)
f.close()

slab = fcc111('Pt', size=(2, 2, 5), vacuum=30.0)
# We use fully periodic boundary conditions because the Lammpsrun
# calculator does not know if it can convert the cell correctly with
# mixed ones and will give a warning.
slab.pbc = 1

params = {}
params['pair_style'] = 'eam'
params['pair_coeff'] = ['1 1 {}'.format(pot_fn)]

calc = LAMMPS(specorder=['Pt'], files=[pot_fn], **params)
slab.set_calculator(calc)

F1_ref = np.array([
    [-3.60822483e-16, -1.44328993e-15, +5.70498663e-01],
    [+2.22044605e-16, +1.36349265e-15, +5.70498663e-01],
    [+2.16493490e-15, +6.66133815e-16, +5.70498663e-01],
    [-1.66533454e-15, +2.02962647e-16, +5.70498663e-01],
    [+1.45716772e-16, -2.13717932e-15, -5.61141857e-01],
    [+9.15933995e-16, +1.69309011e-15, -5.61141857e-01],
    [+1.75554016e-15, -1.38777878e-17, -5.61141857e-01],
    [-3.67761377e-15, -4.85722573e-16, -5.61141857e-01],
    [+1.11022302e-16, -2.68535194e-15, -2.81719092e-15],
    [-1.39471767e-15, +1.52655666e-16, -3.52495810e-15],
    [+1.73472348e-15, -1.04083409e-16, -3.02535774e-15],
    [-2.35922393e-16, +3.21964677e-15, -2.75474088e-15],
    [+1.73472348e-16, -2.58126853e-15, +5.61141857e-01],
    [-3.29597460e-16, +2.71310752e-15, +5.61141857e-01],
    [+3.02535774e-15, -4.71844785e-16, +5.61141857e-01],
    [-2.65759637e-15, -3.60822483e-16, +5.61141857e-01],
    [+1.22124533e-15, -8.04911693e-16, -5.70498663e-01],
    [+3.33066907e-16, +7.49400542e-16, -5.70498663e-01],
    [+5.55111512e-16, -3.33066907e-16, -5.70498663e-01],
    [-2.09554596e-15, +6.38378239e-16, -5.70498663e-01]])

pos1_ref = np.array([
    [-1.42822528e-17, +1.60033330e+00, +3.00000000e+01],
    [+2.77185858e+00, +1.60033330e+00, +3.00000000e+01],
    [+1.38592929e+00, +4.00083325e+00, +3.00000000e+01],
    [+4.15778787e+00, +4.00083325e+00, +3.00000000e+01],
    [+0.00000000e+00, +0.00000000e+00, +3.22632131e+01],
    [+2.77185858e+00, +0.00000000e+00, +3.22632131e+01],
    [+1.38592929e+00, +2.40049995e+00, +3.22632131e+01],
    [+4.15778787e+00, +2.40049995e+00, +3.22632131e+01],
    [+1.38592929e+00, +8.00166649e-01, +3.45264261e+01],
    [+4.15778787e+00, +8.00166649e-01, +3.45264261e+01],
    [+2.77185858e+00, +3.20066660e+00, +3.45264261e+01],
    [+5.54371716e+00, +3.20066660e+00, +3.45264261e+01],
    [-1.42822528e-17, +1.60033330e+00, +3.67896392e+01],
    [+2.77185858e+00, +1.60033330e+00, +3.67896392e+01],
    [+1.38592929e+00, +4.00083325e+00, +3.67896392e+01],
    [+4.15778787e+00, +4.00083325e+00, +3.67896392e+01],
    [+0.00000000e+00, +0.00000000e+00, +3.90528522e+01],
    [+2.77185858e+00, +0.00000000e+00, +3.90528522e+01],
    [+1.38592929e+00, +2.40049995e+00, +3.90528522e+01],
    [+4.15778787e+00, +2.40049995e+00, +3.90528522e+01]])

assert_allclose(slab.get_potential_energy(), -110.3455014595596)
assert_allclose(slab.get_forces(), F1_ref, atol=1e-14)
assert_allclose(slab.positions, pos1_ref, atol=1e-14)

params['group'] = ['lower_atoms id '
                   + ' '.join([str(i+1) for i,
                              tag in enumerate(slab.get_tags()) if tag >= 4])]
params['fix'] = ['freeze_lower_atoms lower_atoms setforce 0.0 0.0 0.0']
params['run'] = 100
params['timestep'] = 0.0005
params['dump_period'] = 10
params['write_velocities'] = True
calc.parameters = params
# set_atoms=True to read final coordinates and velocities after NVE simulation
calc.run(set_atoms=True)

new_slab = calc.atoms.copy()

F2_ref = np.array([
    [+0.00000000e+00, +0.00000000e+00, +0.00000000e+00],
    [+0.00000000e+00, +0.00000000e+00, +0.00000000e+00],
    [+0.00000000e+00, +0.00000000e+00, +0.00000000e+00],
    [+0.00000000e+00, +0.00000000e+00, +0.00000000e+00],
    [+0.00000000e+00, +0.00000000e+00, +0.00000000e+00],
    [+0.00000000e+00, +0.00000000e+00, +0.00000000e+00],
    [+0.00000000e+00, +0.00000000e+00, +0.00000000e+00],
    [+0.00000000e+00, +0.00000000e+00, +0.00000000e+00],
    [+1.41033019e-15, -3.96210842e-15, +6.77588647e-02],
    [-2.65065747e-15, -2.04003481e-15, +6.77588647e-02],
    [+5.27355937e-16, +2.22044605e-15, +6.77588647e-02],
    [+2.91433544e-16, +3.57353036e-15, +6.77588647e-02],
    [-8.32667268e-17, -2.20656826e-15, +1.77346473e-01],
    [+6.24500451e-16, +3.03229664e-15, +1.77346473e-01],
    [+4.13905021e-15, +5.82867088e-16, +1.77346473e-01],
    [-3.68455266e-15, -2.56739074e-16, +1.77346473e-01],
    [+5.55111512e-17, -1.36002321e-15, -2.82016123e-01],
    [+1.24900090e-15, +7.21644966e-16, -2.82016123e-01],
    [+6.10622664e-16, -6.52256027e-16, -2.82016123e-01],
    [-2.16493490e-15, -1.94289029e-16, -2.82016123e-01]])

pos2_ref = np.array([
    [-1.42822528e-17, +1.60033330e+00, +3.00000000e+01],
    [+2.77185858e+00, +1.60033330e+00, +3.00000000e+01],
    [+1.38592929e+00, +4.00083325e+00, +3.00000000e+01],
    [+4.15778787e+00, +4.00083325e+00, +3.00000000e+01],
    [+0.00000000e+00, +0.00000000e+00, +3.22632131e+01],
    [+2.77185858e+00, +0.00000000e+00, +3.22632131e+01],
    [+1.38592929e+00, +2.40049995e+00, +3.22632131e+01],
    [+4.15778787e+00, +2.40049995e+00, +3.22632131e+01],
    [+1.38592929e+00, +8.00166649e-01, +3.45264261e+01],
    [+4.15778787e+00, +8.00166649e-01, +3.45264261e+01],
    [+2.77185858e+00, +3.20066660e+00, +3.45264261e+01],
    [+5.54371716e+00, +3.20066660e+00, +3.45264261e+01],
    [-1.42822528e-17, +1.60033330e+00, +3.67896392e+01],
    [+2.77185858e+00, +1.60033330e+00, +3.67896392e+01],
    [+1.38592929e+00, +4.00083325e+00, +3.67896392e+01],
    [+4.15778787e+00, +4.00083325e+00, +3.67896392e+01],
    [+0.00000000e+00, +0.00000000e+00, +3.90528522e+01],
    [+2.77185858e+00, +0.00000000e+00, +3.90528522e+01],
    [+1.38592929e+00, +2.40049995e+00, +3.90528522e+01],
    [+4.15778787e+00, +2.40049995e+00, +3.90528522e+01]])


Ek = calc.atoms.copy().get_kinetic_energy()
assert_allclose(Ek, 0.1014556059885532)
assert_allclose(Ek, calc.thermo_content[-1]['ke'])
assert_allclose(slab.get_potential_energy(), -110.4469605087525)
assert_allclose(slab.get_forces(), F2_ref, atol=1e-14)
assert_allclose(slab.positions, pos2_ref, atol=1e-14)

os.remove(pot_fn)
